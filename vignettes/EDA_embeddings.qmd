---
title: "Untitled"
format: html
editor: visual
---

# Setup

## Load libraries

```{r}
library(arrow)
library(torch)
library(rjson)
library(curatedTCGAData)
library(TCGAutils)
library(dplyr)
```

## Get data

```{bash eval=FALSE}
## All TCGA-OV Prov-GigaPath outputs
wget -r -np -nH -R index.html https://u24-cancer-genomics.seandavi.workers.dev/provgigapath/TCGA_OV/
```

```{r}
#' @param pg A data frame. Prov-GigaPath output with the dimension 1x15.
#' @param layer The layer of embedding. Available 0 (default) to 13.  
#' 
getEmbedding <- function(pg, layer = 0) {
  
  ## extract the target layer
  layer_ind <- layer + 1
  tensor_string <- pg[[1, layer_ind]] 

  ## Remove the tensor wrapper and brackets
  clean_string <- gsub("tensor\\(\\[\\[|\\]\\]\\)", "", tensor_string)

  ## Split by comma and convert to numeric
  values <- as.numeric(unlist(strsplit(clean_string, ",\\s*")))
  return(values)
}
```

```{r}
## Initiate the matrix
dir <- "~/Projects/imageTCGAAnalyses/data/embeddings/tcga_ov"
fnames <- list.files(dir) %>% grep(".csv", ., value = TRUE) # all Prov-GigaPath outputs
tensor_matrix <- matrix(nrow = length(fnames), ncol = 768)

## Simplify the slide id to participant id
participant_ids <- gsub(".csv", "", fnames) %>% 
  strsplit(., "-") %>% 
  sapply(., function(x) paste(x[1:3], collapse = "-"))
rownames(tensor_matrix) <- participant_ids

## Construct embedding (layer-0) matrix
for (i in seq_along(fnames)) {
  x <- readr::read_csv(file.path(dir, fnames[i])) # load a file
  
  if (dim(x)[1] != 0) {
    res <- getEmbedding(x)
  } else {
    res <- NA
  }
  
  tensor_matrix[i,] <- res
}
```

Slides without Prov-GigaPath results

```{r}
no_res <- tensor_matrix[!complete.cases(tensor_matrix), ] %>% rownames
no_res
```

102 TCGA-OV embddings

```{r embedding_matrix}
tensor_matrix_full <- na.omit(tensor_matrix) # remove 5 samples without results
rownames(tensor_matrix_full)
```

Get TCGA-OV multi-omics data

```{r}
ovmae <- curatedTCGAData("OV", "*", version = "2.0.1", dry.run = FALSE)
ovmae
```

```{r}
for (i in seq_along(colnames(ovmae))) {
  participants_formated <- sapply(strsplit(colnames(ovmae)[[i]], "-"), 
                                  function(x) paste(x[1:3], collapse = "-"))
  
  num_shared <- length(intersect(participants_formated, rownames(tensor_matrix_full)))
  msg <- paste0("H&E images with ", names(colnames(ovmae)[i]), " = ", num_shared)
  print(msg)
}
```

```{r}
ov_clinical <- colData(ovmae) # sample-level metadata

## Select more complete attributes
completeness <- colSums(!is.na(ov_clinical))/nrow(ov_clinical)*100
summary(completeness)
ov_clinical_sub <- ov_clinical[which(completeness > 95)] %>% # more than 95% complete attributes
  as.data.frame() %>%
  select(-matches("aliquot")) %>% ## Filter out technical metadata
  select(-matches("portion")) ## Filter out technical metadata
```

```{r question, echo=FALSE, eval=FALSE}
necrosis <- ov_clinical$patient.samples.sample.portions.portion.2.slides.slide.2.percent_necrosis
table(necrosis, useNA = "ifany") # how was this measured?
```

Subset embedding and metadata tables to shared participants/samples

```{r}
embedding_matrix <- tensor_matrix_full[!duplicated(rownames(tensor_matrix_full)),] # there is a duplicate
```

```{r}
n <- 3 # the minimum number of unique values per attribute
m <- 10 # the maximum number of unique values per attribute
all <- ov_clinical_sub %>%
  as.data.frame() %>%
  filter(patientID %in% rownames(tensor_matrix_full))

## Select metadata attributes
numLv <- apply(all, 2, function(x) {length(unique(x))}) # integer vector: the number of unique values
nLv <- numLv[numLv >= n & numLv <= m] # two levels most likely include `NA`

## Factorize
slideAttrNames <- names(nLv) # attributes to check potential link with embeddings
for (slideAttrName in slideAttrNames) {
    all[[slideAttrName]] <- as.factor(all[[slideAttrName]])
}

## Subset of metadata including only the samples with image + categorical attrs
metadata_df <- all[slideAttrNames]
```

```{r}
plots
```
