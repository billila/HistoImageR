---
title: "Reproduce pasta vignette with H&E slide features"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
vignette: >
  %\VignetteIndexEntry{Reproduce pasta vignette}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
output:
  BiocStyle::html_document:
    number_sections: yes
    toc: yes
    toc_depth: 4
editor_options: 
  markdown: 
    wrap: 72
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE, 
                      warning = FALSE)
```

```{r}
suppressPackageStartupMessages({
  library(SpatialExperiment)
  library(spatstat.geom)
  library(spatstat.explore)
  library(dplyr)
  library(ggplot2)
  library(patchwork)
  library(reshape2)
  library(stringr)
  library(tidyr)
  library(magrittr)
})
```

```{r, message=FALSE, warning=FALSE}
datDir <- "~/Projects/imageTCGAAnalyses/data/demo_outputs/"
fname <- "TCGA-23-1121-01Z-00-DX1.E2F25441-32C3-46BF-A845-CB4FA787E8CB.h5ad"
h5ad_file <- file.path(datDir, fname)
hn_sce <- readH5AD(h5ad_file, use_hdf5 = TRUE, reader = "R")
colnames(reducedDim(hn_sce, "spatial")) <- c("x", "y")
hn_spe <- toSpatialExperiment(hn_sce)

assay(hn_spe, "mean_intensity", withDimnames = FALSE) <- matrix(colData(hn_spe)$mean_intensity, nrow = 1)
assay(hn_spe, "nnd", withDimnames = FALSE) <- matrix(colData(hn_spe)$nearest_neighbor_distance, nrow = 1)

# Reduced dimension to spatial coords
spatialCoords(hn_spe) <- reducedDim(hn_sce, "spatial")

hn_spe
```


```{r}
hn_pp_ls <- hn_spe |> .ppp(marks = "type") 
hn_pp_ls
```

```{r}
# create a dataframe from the point pattern
hn_pp_df <- hn_pp_ls |> as.data.frame()

# plot with ggplot
ggplot(hn_pp_df, aes(x, y, colour = marks)) +
  geom_point(size = 0.5) +
  coord_equal()
```

### Windows
```{r, fig.width=10, fig.height=10}
hn_pp_ls |> plot()
```

```{r, fig.width=10, fig.height=10}
hn_pp_ls_round <- hn_pp_ls
# calculate circle with radius 850 Âµm and a center at the 
# centroid of the window would look like
w <- disc(r = 10000, centroid.owin(Window(hn_pp_ls)))
Window(hn_pp_ls_round) <- w
hn_pp_ls_round |> plot()
```

### Marks
```{r}
unmark(hn_pp_ls) |> plot()
```

#### categorical Marks
```{r, fig.width=10, fig.height=10}
hn_pp_ls |> plot()
```


```{r, fig.height=10, fig.width=10}
hn_pp_ls |>
  split() |>
  plot()
```

#### Continuous Marks

```{r}
hn_gex <- assays(hn_spe)$mean_intensity |>
  t() |>
  as.matrix() |>
  data.frame() |>
  set_rownames(NULL)

# gene expression to marks
marks(hn_pp_ls) <- hn_gex
```

```{r, fig.height=5, fig.width=10}
# create a dataframe in long format for plotting
hn_pp_df <- hn_pp_ls |>
  as.data.frame() |>
  pivot_longer(cols = 3)

## Intensity
ggplot(hn_pp_df, aes(x, y, colour = log(value + 1))) +
  geom_point(size = 0.5) +
  facet_wrap(~name) +
  coord_equal() +
  scale_color_continuous(type = "viridis")
```

#### Within Mark Comparison

```{r fig.height=5, fig.width=10, eval=FALSE, echo=FALSE}
hn_df <- hn_pp_ls |> as.data.frame()
hn_df_max_intensity <- hn_df[which.max(hn_df$marks),]

ggplot(hn_df_max_intensity, aes(x, y, colour = marks)) +
  geom_point(size = 0.5) +
  # facet_wrap(~stack, scales = "free") +
  theme(aspect.ratio = 1)
```

Here, we plot the distribution of mature oligodendrocytes across three slices of one 3D brain sample.

Continuous marks can be compared as well, e.g. the expression of a gene across slices of a tissue

```{r, fig.height=5, fig.width=10}
pp_df <- lapply(zstack_list, function(x) {
  # subset the original SpatialExperiment to our example slice -0.09
  sub <- spe[, spe$sample_id == x]
  #  Genes from Fig. 6 of Moffitt et al. (2018)
  genes <- c("Slc18a2", "Esr1", "Pgr")
  gex <- assay(sub)[genes, ] |>
    t() |>
    as.matrix() |>
    data.frame() |>
    set_rownames(NULL)
  # gene expression to marks
  marks(pp_ls[[x]]) <- gex
  df <- pp_ls[[x]] |> as.data.frame()
  df$stack <- x
  return(df)
}) |> bind_rows()

ggplot(pp_df, aes(x, y, colour = log(Esr1 + 1))) +
  geom_point(size = 0.5) +
  facet_wrap(~stack, scales = "free") +
  theme(aspect.ratio = 1) +
  scale_color_continuous(type = "viridis")
```

We note that the expression of gene `Esr1` is differentially distributed across the slices of the 3D sample.

#### Correlation

Correlation is a second order quantity that measures the dependence between points [@baddeleySpatialPointPatterns2015 pp. 199]. A famous way to measure this is with Ripley's $K$, which is a cumulative function that quantifies the "number of $r$-neighbours of a typical random point" [@baddeleySpatialPointPatterns2015, pp. 204; @ripleySecondOrderAnalysisStationary1976].

##### Global Measures

Global correlation measures quantify the correlation in the entire window. Global Ripley's $K$ is defined as:

$$
\hat{K}(r) = \frac{|W|}{n(n-1)}\sum_{i=1}^n\sum_{j=1 \\j \neq i}^n\{d_{ij}\leq r\} e_{ij}(r)
$$

In the formula above we note a few things:

-   The function is normalised by the number of points $n$ and the window size $|W|$

-   the factor $e_{ij}(r)$ is an edge correction - see the section on `border corrections` further down in the vignette [@baddeleySpatialPointPatterns2015, pp. 204].

Ripley's $K$ function can be variance stabilised, which is referred to as Besag's $L$ [@caneteSpicyRSpatialAnalysis2022; @besag1977contribution]. The idea behind variance stabilisation is to "uncouple" the relationship between mean and variance. By taking the square root of the function in question, the variance is nearly constant across the function [@bartlettUseTransformations1947].

$$
L(r) = \sqrt{\frac{K(r)}{\pi}}
$$

```{r, message = FALSE, warning=FALSE, fig.height=5, fig.width=10, results='hide'}
res_ls <- lapply(list('Kest', 'Lest'), function(fun) {
  res <- calcMetricPerFov(
    spe,
    'OD Mature',
    subsetby = 'sample_id',
    fun = fun,
    marks = 'cluster_id',
    rSeq = NULL,
    by = c('Animal_ID', 'sample_id')
  )
  res <- subset(res, sample_id %in% c('-0.09', '0.01', '0.21'))
  return(res)
})

p_ls <- lapply(res_ls, function(res) {
  plotMetricPerFov(
    res,
    theo = TRUE,
    correction = "iso",
    x = "r",
    imageId = 'sample_id',
    legend.position = "right"
  )
})
```

```{r, fig.height=5, fig.width=10}
wrap_plots(p_ls, guides = 'collect')
```

The strongest estimate of association between oligodendrocytes is found for the slices $0.01$. Slice $0.21$ does not show such a high degree of association at radii $\leq300$ as the other two slices. This means that the apparent clustering we see in the distribution of points is mainly due to an overall higher number of cells in slice $0.21$ and not a higher degree of association per se. The black line indicates the expected $K$ respectively $L$ function for a completely spatially random poisson process [@baddeleySpatialPointPatterns2015, pp. 132 ff.].

Same can be done for the arrangement of `Microglia` cells across these three sections.

```{r, eval=TRUE}
res <- calcMetricPerFov(
  spe,
  'Microglia',
  subsetby = 'sample_id',
  fun = 'Lest',
  marks = 'cluster_id',
  rSeq = NULL,
  by = c('Animal_ID', 'sample_id')
)
res <- subset(res, sample_id %in% c('-0.09', '0.01', '0.21'))

plotMetricPerFov(
  res,
  theo = TRUE,
  correction = "iso",
  x = "r",
  imageId = 'sample_id',
  legend.position = "right"
)
```

We note that the Microglia cells are distributed close to a Poisson Process across the different slices.

A similar analysis can be performed for continuous marks. We calculate a mark weighted correlation function `markcorr`. The mark weighted correlation function is defined as:

$$
k_f(r) =  \frac{\mathbb{E}[f(m(u),m(v))|u,v \in X]}{\mathbb{E}[f(M,M')]}
$$

where the numerator is the conditional expectation of the marks at location $u,v$ separated by a radius $r$ and $f$ can be any function linking the two marks. The denominator is the expectation of two random marks $M,M'$ [@baddeleySpatialPointPatterns2015, pp. 603].

```{r}
res <- calcMetricPerFov(
  spe,
  selection = 'Esr1',
  subsetby = 'sample_id',
  fun = 'markcorr',
  marks = 'Esr1',
  rSeq = NULL,
  by = c('Animal_ID', 'sample_id'),
  continuous = TRUE
)

res <- subset(res, sample_id %in% c('-0.09', '0.01', '0.21'))

p <- plotMetricPerFov(
  res,
  correction = "iso",
  theo = TRUE,
  x = "r",
  imageId = 'sample_id',
  legend.position = "right"
)
p
```

We note that at very small radii the expression of the gene `Esr1` shows a high association with itself. Later on, the association is less pronounced than in the slices $-0.09$ and $0.01$.

##### Local Measures

Next to observation window metrics, we can calculate point level statistics as well. One such option is the local indicators of spatial association (LISA). This gives one curve per point in the field of view [@baddeleySpatialPointPatterns2015 pp. 247-248; @anselinLocalIndicatorsSpatial1995].

```{r, message = FALSE, warning=FALSE, fig.height=5, fig.width=10, results='hide'}
pp <- subset(pp_ls[["0.01"]], marks %in% "OD Mature")
L_odmature_lisa <- localL(pp)

df <- as.data.frame(L_odmature_lisa)
dfm <- reshape2::melt(df, "r")

get_sel <- dfm |>
  dplyr::filter(r > 200.5630 & r < 201.4388, variable != "theo") |>
  dplyr::mutate(sel = value) |>
  dplyr::select(variable, sel)

dfm <- dfm |> left_join(get_sel)

p <- ggplot(dfm, aes(
  x = r,
  y = value,
  group = variable,
  colour = sel
)) +
  geom_line(linewidth = 1) +
  scale_color_continuous(type = "viridis") +
  geom_vline(xintercept = 200) +
  theme(legend.position = "none") +
  ggtitle("LISA curves of slice 0.01")
```

```{r, fig.height=5, fig.width=10}
p
```

These curves could be analysed using tools from functional data analysis such as functional PCA [@baddeleySpatialPointPatterns2015 pp. 247-248; @ramsayPrincipalComponentsAnalysis2005].

### Cross Mark Comparison

The same analyses as above can be performed between two cell types. The corresponding functions are called cross functions [@baddeleySpatialPointPatterns2015 pp. 594 ff.]. We implement (similar to the analyses above) a cross comparison between two cell types of interest. The provided functions enable this by giving a function and a vector with two cell types as input.

```{r, message = FALSE, warning=FALSE, fig.height=5, fig.width=10}
# select OD Mature and Microglia cells
pp_df_odmature_microglia <- pp_df_categorical[pp_df_categorical$marks %in% c("OD Mature", "Microglia"), ]

ggplot(pp_df_odmature_microglia, aes(x, y, colour = marks)) +
  geom_point(size = 0.5) +
  facet_wrap( ~ stack, scales = "free") +
  theme(aspect.ratio = 1)
```

```{r, message = FALSE, warning=FALSE, fig.height=5, fig.width=10, results='hide'}
res <- calcMetricPerFov(
  spe,
  c("OD Mature", "Microglia"),
  subsetby = 'sample_id',
  fun = 'Lcross',
  marks = 'cluster_id',
  rSeq = NULL,
  by = c('Animal_ID', 'sample_id')
)
res <- subset(res, sample_id %in% c('-0.09', '0.01', '0.21'))

p <- plotMetricPerFov(
  res,
  theo = TRUE,
  correction = "iso",
  x = "r",
  imageId = 'sample_id',
  legend.position = "right"
)
```

```{r, fig.height=5, fig.width=10}
p
```

We note that there is not a very strong co-localisation indicated by the $L$ curves between mature oligodendrocytes and microglia cells. If we look at their spatial distribution that makes sense since microglia cells are distributed more or less homogeneously in the respective slices.

### Edge effects and their corrections for spatial metrics

Edge effects describe the phenomenon that not the entire point process is observed, but rather only the part within the window $W$. This means the value of various statistics could be biased along the edges [@baddeleySpatialPointPatterns2015, pp. 213].

There are many corrections for edge effects that are briefly listed here [@baddeleySpatialPointPatterns2015, pp. 214-219]:

Border correction:

-   In border correction the summation of data points is restricted to $x_i$ for which $b(x_i,r)$ is completely in the window $W$.

Isotropic correction:

-   We can regard edge effect as a sampling bias. Larger distances (e.g. close to the edges) are less likely to be observed. This can be corrected for.

Translation correction:

-   A stationary point process $X$ is invariant to translations. So the entire point process can be shifted by a vector $s$ to be at the position $X+s$.

## Summary and Considerations

-   Point patterns are realisations of a point process. In the analysis we make inferences about the point process.

-   A point process assumes stochasticity. Therefore, HTS-based approaches are not suitable for point pattern analysis.

-   There are global metrics for the comparison within a celltype or between celltypes.

-   There are corresponding metrics for single cells and their interactions.

-   Point pattern analysis allows for the analysis of continuous gene expression marks as well.

# Appendix

## Session info

```{r}
sessionInfo()
```

```{r, include = FALSE}
# Define the directory and file paths
dir_path <- "../tests/"
dir_path_out <- "../tests/out"

# Check if the directory exists, and create it if it doesn't
if (!dir.exists(dir_path)) {
  dir.create(dir_path)
  dir.create(dir_path_out)
}

res |> 
  write.csv("../tests/out/test-00-overview-pp-R.csv")
```

